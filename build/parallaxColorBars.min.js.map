{"version":3,"sources":["parallaxColorBars.es6"],"names":["$","fn","parallaxColorBars","method","methods","getY","init","options","this","each","$this_parallax_section","$color_bars","find","parallax_section_width","outerWidth","parallax_section_height","outerHeight","bind","$this_bar","$color_bar_background","$color_bar_options","data","css","left","top","width","height","position","apply","Array","prototype","slice","call","arguments","_typeof","error","jQuery"],"mappings":"oOAAA,SAAWA,GAEPA,EAAEC,GAAGC,kBAAoB,SAAUC,GAE/B,GAAIC,IAEAC,KAAM,aAKNC,KAAM,SAAUC,GAqBZC,KAAKC,KAAK,WAEN,GAAIC,GAAyBV,EAAEQ,MAC3BG,EAAcD,EAAuBE,KAAK,uBAC1CC,EAAyBH,EAAuBI,aAChDC,EAA0BL,EAAuBM,aAErDL,GAAYM,KAAK,sBAAuB,cAKxCN,EAAYF,KAAK,WAEb,GAAIS,GAAYlB,EAAEQ,MACdW,EAAwBR,EAAYC,KAAK,kCACzCQ,EAAqBT,EAAYU,KAAK,qBAE1CH,GAAUI,KACNC,KAAMH,EAAmBG,KAAO,KAChCC,IAAKJ,EAAmBI,IAAM,OAGlCL,EAAsBG,KAClBC,MAAQH,EAAmBG,KAAO,KAClCC,KAAOJ,EAAmBI,IAAM,KAChCC,MAAOZ,EAAyB,KAChCa,OAAQX,EAA0B,KAClCY,SAAU,kBAqE9B,OAAIvB,GAAQD,GACDC,EAAQD,GAAQyB,MAAMpB,KAAMqB,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAChD,gBAAlB,KAAO9B,EAAP,YAAA+B,QAAO/B,KAAwBA,MAGtCH,GAAEmC,MAAM,oCAAsChC,EAAS,gCAFhDC,EAAQE,KAAKsB,MAAMpB,KAAMyB,aAOzCG","file":"parallaxColorBars.min.js","sourcesContent":["(function ($) {\n\n    $.fn.parallaxColorBars = function (method) {\n\n        let methods = {\n\n            getY: function(){\n\n            },\n\n\n            init: function (options) {\n\n                // let settings = $.extend({\n                //     duration: 1.5,\n                //     shift: 10\n                // }, options);\n\n\n                // let scrollTop = 0,\n                //     windowHeight = 0,\n                //     triggerPosition = 0;\n                //\n                //\n                // $(window).on('scroll load', function () {\n                //     scrollTop = $(window).scrollTop();\n                //     windowHeight = $(window).height();\n                //\n                //     triggerPosition = scrollTop + windowHeight;\n                // });\n\n\n                this.each(function () {\n\n                    let $this_parallax_section = $(this),\n                        $color_bars = $this_parallax_section.find('.parallax-color-bar'),\n                        parallax_section_width = $this_parallax_section.outerWidth(),\n                        parallax_section_height = $this_parallax_section.outerHeight();\n\n                    $color_bars.bind('parallaxContentMove', function(){\n\n                    });\n\n\n                    $color_bars.each(function(){\n\n                        let $this_bar = $(this),\n                            $color_bar_background = $color_bars.find('.parallax-color-bar-background'),\n                            $color_bar_options = $color_bars.data('parallax-color-bar');\n\n                        $this_bar.css({\n                            left: $color_bar_options.left + 'px',\n                            top: $color_bar_options.top + 'px'\n                        });\n\n                        $color_bar_background.css({\n                            left: - $color_bar_options.left + 'px',\n                            top: - $color_bar_options.top + 'px',\n                            width: parallax_section_width + 'px',\n                            height: parallax_section_height + 'px',\n                            position: 'absolute'\n                        });\n                    })\n\n\n                    // let $this = $(this),\n                    //     thisHeight = $this.outerHeight(),\n                    //     animationTriggerStart = 0,\n                    //     animationTriggerEnd = 0,\n                    //     offset = 0,\n                    //     animationLength = 0,\n                    //\n                    //     dataOptions = $this.data('parallax-content'),\n                    //\n                    //     animateDuration = settings.duration,\n                    //     animateShift = settings.shift;\n                    //\n                    //\n                    // if (dataOptions != undefined) {\n                    //     if (dataOptions.hasOwnProperty('duration')) {\n                    //         animateDuration = dataOptions.duration;\n                    //     }\n                    //\n                    //     if (dataOptions.hasOwnProperty('shift')) {\n                    //         animateShift = dataOptions.shift;\n                    //     }\n                    // }\n                    //\n                    //\n                    // $(window).on('load resize', function () {\n                    //\n                    //     offset = $this.offset();\n                    //\n                    //     animationTriggerStart = offset.top;\n                    //\n                    //     animationTriggerEnd = animationTriggerStart + windowHeight;\n                    //\n                    //     animationLength = animationTriggerEnd - animationTriggerStart;\n                    // });\n                    //\n                    //\n                    // $(window).on('scroll resize load', function () {\n                    //\n                    //     if (triggerPosition > animationTriggerStart && triggerPosition < animationTriggerEnd + thisHeight) {\n                    //\n                    //         $this.addClass('active');\n                    //\n                    //         let centerPixelShift = triggerPosition - offset.top - (animationLength * 0.5);\n                    //\n                    //         let centerPercentShift = centerPixelShift / (animationLength / 100) * 2;\n                    //\n                    //         let y = animateShift / 100 * centerPercentShift;\n                    //\n                    //         TweenLite.to($this, animateDuration, {y: y + 'px'});\n                    //\n                    //     }\n                    //\n                    //     else {\n                    //         $this.removeClass('active');\n                    //     }\n                    //\n                    // })\n\n                });\n              \n            }\n        };\n\n\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('There is no method with the name ' + method + ', for jQuery.parallaxContent');\n        }\n    };\n\n\n})(jQuery);\n"]}