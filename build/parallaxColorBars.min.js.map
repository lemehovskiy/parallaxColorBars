{"version":3,"sources":["parallaxColorBars.es6"],"names":["factory","define","amd","exports","module","require","jQuery","$","fn","parallaxColorBars","method","methods","init","options","get_mirror_progress","progress","get_scroll_progress","settings","animation_progress","trigger","element_animation_start","animation_length","extend","duration","shift","top","left","width","height","scrollTop","window_height","window","on","resize","this","resizeTO","clearTimeout","setTimeout","each","update_progress","element","$this_parallax_section","mirror_animation_progress","$color_bars","find","parallax_section_width","outerWidth","parallax_section_height","outerHeight","element_animation_end","offset","$this_bar","color_bar_options","data","bar_position_top","bar_position_left","bar_width","bar_height","animateDuration","animateShift","$color_bar_background","css","position","overflow","bind","y","TweenLite","to","apply","Array","prototype","slice","call","arguments","_typeof","error"],"mappings":"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","file":"parallaxColorBars.min.js","sourcesContent":["/*\n\n Parallax Color Bars\n\n Author: lemehovskiy\n Website: https://github.com/lemehovskiy\n\n */\n\n;(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n})\n(function ($) {\n\n    $.fn.parallaxColorBars = function (method) {\n\n        let methods = {\n\n            init: function (options) {\n\n                let settings = $.extend({\n                    duration: 2,\n                    shift: 100,\n                    top: 50,\n                    left: 50,\n                    width: 10,\n                    height: 20\n                }, options);\n\n\n                let scrollTop = 0,\n                    window_height = 0,\n                    trigger;\n\n\n                $(window).on('scroll load', function () {\n                    scrollTop = $(window).scrollTop();\n                    window_height = $(window).height();\n\n                    trigger = $(window).scrollTop() + window_height;\n                });\n\n\n                $(window).resize(function () {\n                    if (this.resizeTO) clearTimeout(this.resizeTO);\n                    this.resizeTO = setTimeout(function () {\n                        $(this).trigger('resizeEnd');\n                    }, 500);\n                });\n\n\n                this.each(function () {\n\n                    let $this_parallax_section = $(this),\n                        $color_bars = $this_parallax_section.find('.color-bar'),\n                        parallax_section_width = $this_parallax_section.outerWidth(),\n                        parallax_section_height = $this_parallax_section.outerHeight(),\n                        animation_progress = 0,\n                        mirror_animation_progress = 0,\n                        element_animation_start,\n                        element_animation_end,\n                        animation_length;\n\n\n                    $(window).on('resize', function () {\n                        parallax_section_width = $this_parallax_section.outerWidth();\n                        parallax_section_height = $this_parallax_section.outerHeight();\n                    });\n\n\n                    $(window).on('scroll resize load', function () {\n                        element_animation_start = $this_parallax_section.offset().top;\n                        element_animation_end = element_animation_start + window_height + $this_parallax_section.outerHeight();\n                        animation_length = element_animation_end - element_animation_start;\n\n                        if (trigger > element_animation_start && trigger < element_animation_end) {\n                            update_progress();\n                        }\n\n                    });\n\n\n                    update_progress();\n\n                    function update_progress () {\n                        animation_progress = get_scroll_progress({\n                            element: $this_parallax_section,\n                            trigger: trigger,\n                            window_height: window_height,\n                            element_animation_start: element_animation_start,\n                            animation_length: animation_length\n                        });\n\n                        mirror_animation_progress = get_mirror_progress(animation_progress);\n                    }\n\n                    $color_bars.each(function () {\n                        \n                        let $this_bar = $(this);\n\n                        let color_bar_options = $this_bar.data('parallax-color-bar');\n                        settings = $.extend({}, settings, color_bar_options);\n\n                        let bar_position_top = settings.top,\n                            bar_position_left = settings.left,\n                            bar_width = settings.width,\n                            bar_height = settings.height,\n\n                            animateDuration = settings.duration,\n                            animateShift = settings.shift,\n\n                            $color_bar_background = $this_bar.find('.color-bar-background');\n\n\n                        $this_bar.css({\n                            top: bar_position_top + '%',\n                            left: bar_position_left + '%',\n                            position: 'absolute',\n                            overflow: 'hidden',\n                            width: bar_width + '%',\n                            height: bar_height + '%'\n\n                        });\n\n\n                        $color_bar_background.css({\n                            position: 'absolute'\n                        });\n\n\n                        $(window).bind('resizeEnd load', function () {\n                            $color_bar_background.css({\n                                width: parallax_section_width + 'px',\n                                height: parallax_section_height + 'px',\n                                left: -(parallax_section_width / 100 * bar_position_left) + 'px',\n                                top: -(parallax_section_height / 100 * bar_position_top) + 'px'\n                            });\n\n                        });\n\n\n                        $(window).on('scroll resize load', function () {\n\n                            let y = animateShift * mirror_animation_progress;\n\n                            TweenLite.to($this_bar, animateDuration, {y: y + 'px'});\n                            TweenLite.to($color_bar_background, animateDuration, {y: -y + 'px'});\n\n\n                        })\n                    })\n                });\n\n\n\n\n                function get_mirror_progress(progress) {\n\n                    let mirror_progress = 0;\n\n                    if (progress > 0.5) {\n                        mirror_progress = -(1 - 1 / 0.5 * progress)\n                    }\n                    else {\n                        mirror_progress = -(1 - 1 / 0.5 * progress)\n                    }\n\n                    return mirror_progress;\n                }\n\n\n                function get_scroll_progress(settings) {\n\n                    let animation_progress;\n\n                    animation_progress = (settings.trigger - settings.element_animation_start) / settings.animation_length;\n\n                    if (animation_progress > 1) {\n                        animation_progress = 1;\n                    }\n                    else if (animation_progress < 0) {\n                        animation_progress = 0;\n                    }\n\n                    return animation_progress;\n                    \n                }\n            }\n        };\n\n\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('There is no method with the name ' + method + ', for jQuery.parallaxColorBars');\n        }\n    };\n\n});"]}