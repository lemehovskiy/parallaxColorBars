{"version":3,"sources":["parallaxColorBars.es6"],"names":["factory","define","amd","exports","module","require","jQuery","$","fn","parallaxColorBars","method","methods","init","options","get_mirror_progress","progress","get_scroll_progress","settings","$element","element","trigger","window","scrollTop","window_height","element_animation_start","offset","top","element_animation_end","outerHeight","animation_length","animation_progress","extend","duration","shift","left","width","height","windowHeight","triggerPosition","on","resize","this","resizeTO","clearTimeout","setTimeout","each","$this_parallax_section","$color_bars","find","parallax_section_width","outerWidth","parallax_section_height","mirror_animation_progress","$this_bar","color_bar_options","data","bar_position_top","bar_position_left","bar_width","bar_height","animateDuration","animateShift","$color_bar_background","css","position","overflow","bind","y","TweenLite","to","apply","Array","prototype","slice","call","arguments","_typeof","error"],"mappings":"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","file":"parallaxColorBars.min.js","sourcesContent":["/*\n\n Parallax Color Bars\n\n Author: lemehovskiy\n Website: https://github.com/lemehovskiy\n\n */\n\n;(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n})\n(function ($) {\n\n    $.fn.parallaxColorBars = function (method) {\n\n        let methods = {\n\n            init: function (options) {\n\n                let settings = $.extend({\n                    duration: 2,\n                    shift: 100,\n                    top: 50,\n                    left: 50,\n                    width: 10,\n                    height: 20\n                }, options);\n\n\n                let scrollTop = 0,\n                    windowHeight = 0,\n                    triggerPosition = 0;\n\n\n                $(window).on('scroll load', function () {\n                    scrollTop = $(window).scrollTop();\n                    windowHeight = $(window).height();\n\n                    triggerPosition = scrollTop + windowHeight;\n                });\n\n\n                $(window).resize(function () {\n                    if (this.resizeTO) clearTimeout(this.resizeTO);\n                    this.resizeTO = setTimeout(function () {\n                        $(this).trigger('resizeEnd');\n                    }, 500);\n                });\n\n\n                this.each(function () {\n\n                    let $this_parallax_section = $(this),\n                        $color_bars = $this_parallax_section.find('.color-bar'),\n                        parallax_section_width = $this_parallax_section.outerWidth(),\n                        parallax_section_height = $this_parallax_section.outerHeight(),\n                        animation_progress = 0,\n                        mirror_animation_progress = 0;\n\n\n                    $(window).on('resize', function () {\n                        parallax_section_width = $this_parallax_section.outerWidth();\n                        parallax_section_height = $this_parallax_section.outerHeight();\n                    });\n\n\n                    $(window).on('scroll resize load', function () {\n                        animation_progress = get_scroll_progress({\n                            element: $this_parallax_section,\n                            duration: 'viewport',\n                            window_height: windowHeight\n\n                        });\n\n\n                        mirror_animation_progress = get_mirror_progress(animation_progress);\n\n                        // console.log(mirror_animation_progress);\n\n                    });\n\n                    $color_bars.each(function () {\n\n\n                        let $this_bar = $(this);\n\n                        let color_bar_options = $this_bar.data('parallax-color-bar');\n                        settings = $.extend({}, settings, color_bar_options);\n\n                        let bar_position_top = settings.top,\n                            bar_position_left = settings.left,\n                            bar_width = settings.width,\n                            bar_height = settings.height,\n\n                            animateDuration = settings.duration,\n                            animateShift = settings.shift,\n\n                            $color_bar_background = $this_bar.find('.color-bar-background');\n\n                        $this_bar.css({\n                            top: bar_position_top + '%',\n                            left: bar_position_left + '%',\n                            position: 'absolute',\n                            overflow: 'hidden',\n                            width: bar_width + '%',\n                            height: bar_height + '%'\n\n                        });\n\n\n                        $color_bar_background.css({\n                            position: 'absolute'\n                        });\n\n\n                        $(window).bind('resizeEnd load', function () {\n                            $color_bar_background.css({\n                                width: parallax_section_width + 'px',\n                                height: parallax_section_height + 'px',\n                                left: -(parallax_section_width / 100 * bar_position_left) + 'px',\n                                top: -(parallax_section_height / 100 * bar_position_top) + 'px'\n                            });\n\n                        });\n\n\n                        $(window).on('scroll resize load', function () {\n\n                            let y = animateShift * mirror_animation_progress;\n\n                            TweenLite.to($this_bar, animateDuration, {y: y + 'px'});\n                            TweenLite.to($color_bar_background, animateDuration, {y: -y + 'px'});\n\n\n                        })\n                    })\n\n                });\n\n\n                function get_mirror_progress(progress) {\n\n                    let mirror_progress = 0;\n\n\n                    if (progress > 0.5) {\n                        mirror_progress = -(1 - 1 / 0.5 * progress)\n                    }\n                    else {\n                        mirror_progress = -(1 - 1 / 0.5 * progress)\n                    }\n\n\n                    return mirror_progress;\n\n                }\n\n\n                function get_scroll_progress(settings) {\n\n                    let $element = settings.element;\n\n                    let trigger = $(window).scrollTop() + settings.window_height;\n\n                    let element_animation_start = $element.offset().top;\n\n                    let element_animation_end = element_animation_start + settings.window_height + $element.outerHeight();\n\n                    let animation_length = element_animation_end - element_animation_start;\n\n                    let animation_progress;\n\n                    // if (trigger > element_animation_start && trigger < element_animation_end){\n                    animation_progress = (trigger - element_animation_start) / animation_length;\n                    // }\n\n                    if (animation_progress > 1) {\n                        animation_progress = 1;\n                    }\n                    else if (animation_progress < 0) {\n                        animation_progress = 0;\n                    }\n\n                    return animation_progress;\n\n\n                }\n\n            }\n        };\n\n\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('There is no method with the name ' + method + ', for jQuery.parallaxColorBars');\n        }\n    };\n\n});"]}